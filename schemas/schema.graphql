type Query {
    component(id: ID!): Component
    ims(id: ID!): IMS
    interface(id: ID!): Interface
    issue(issueId: ID!, componentId: ID!): Issue
    project(id: ID!): Project
    user(id: ID!): User
    userByUsername(username: String!): User
    projects: [Project]
}

type Mutation {
    createIssue(data: IssueInput!): Issue
    updateIssue(issueId: ID!, componentId: ID!, data: IssueInput!): Issue
    addIssueRelation(data: AddIssueRelationInput): IssueRelation
    removeIssueRelation(fromId: ID!, fromComponentId:ID!, toId: ID!): Boolean
    removeIssue(issueId: ID!, componentId: ID!): Boolean

    createProject(data: ProjectInput!): Project
    modifyProject(projectId: ID!, data: ProjectInput): Project
    addComponentToProject(projectId: ID!, componentId: ID!): Project
    removeComponentFromProject(projectId: ID!, componentId: ID!): Project
    removeProject(projectId: ID!): Boolean

    createComponent(data: ComponentInput): Component
    addUsedInterface(componentId: ID!, interfaceId: ID!): Component
    removeUsedInterface(componentId: ID!, interfaceId: ID!): Component
    removeComponent(componentId: ID!):Boolean

    createInterface(data: InterfaceInput!): Interface
    removeInterface(interfaceId: ID!): Boolean

}

interface Element {
    id: ID!
}

type Issue {
    id: ID!
    title: String
    body: String
    bodyRendered: String
    comments: [Comment]
    opened: Boolean
    issueType: IssueType
    relatedIssues: [IssueRelation]
    creationDate: String
}

type IssueRelation {
    sourceIssue: Issue
    destIssue: Issue
    relationType: RelationType
}

input AddIssueRelationInput {
    fromId: ID!, 
    fromComponentId: ID!, 
    toId: ID!, 
    toComponentId: ID!,
    type: RelationType
}

enum RelationType {
    RELATED_TO,
    DUPLICATES,
    DEPENDS,
}

enum IssueType {
    UNCLASSIFIED,
    BUG,
    FEATURE_REQUEST,
}

input IssueInput {
    title: String
    body: String
    opened: Boolean
    componentId: ID
    issueType: IssueType
}

type Comment implements Element {
    id: ID!
    author: User
    text: String
    textRendered: String
}

type User implements Element {
    id: ID!
    userName: String
    components: [Component]
    projects: [Project]
    ims: [IMS]
}

input UserInput {
    userName: String!
    password: String
}

type Component implements Element {
    id: ID!
    name: String
    description: String
    issues: [Issue]
    projects: [Project]
    ims: IMS
    interfaces: [Interface]
    usedInterfaces: [Interface]
    imsData: ImsData
}

type ImsData {
    repository: String
    owner: String
}

type Interface implements Element {
    id: ID!
    hostComponent: Component
    usingComponents: [Component]
    name: String
}

input InterfaceInput {
    name: String!
    hostComponentId: ID!
}

input ComponentInput {
    name: String!
    description: String
    imsId: ID!
    imsData: ImsDataInput
    ownerUsername: String!
}

input ImsDataInput {
    repository: String!
    owner: String!
}

interface IMS {
    id: ID!
    type: ImsType
}

type GitHubIMS implements IMS {
    id: ID!
    type: ImsType
    endpoint: String
    redirectURI: String
}

enum ImsType {
    GitHub
}

type Project implements Element {
    id: ID!
    name: String
    components: [Component]
    ownerUsername: String
    description: String
}

input ProjectInput {
    name: String!
    description: String
    ownerUsername: String!
}